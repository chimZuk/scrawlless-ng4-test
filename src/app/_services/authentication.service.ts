import { Injectable } from '@angular/core';
import { Http, Headers, Response } from '@angular/http';
import { Observable } from 'rxjs';
import 'rxjs/add/operator/map'

@Injectable()
export class AuthenticationService {
  public token: string;

  mode = "user";

  language: any[] = [
    {
      reg: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
      sign: '–í—Ö–æ–¥',
      name: '–ò–º—è',
      sname: '–§–∞–º–∏–ª–∏—è',
      type: '–¢–∏–ø',
      stud: '–£—á–µ–Ω–∏–∫',
      teach: '–£—á–∏—Ç–µ–ª—å',
      email: 'Email',
      pass: '–ü–∞—Ä–æ–ª—å',
      log: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
      sup: '–í–æ–π—Ç–∏',
      snack: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞ 20 –∏—é–ª—è üòÑüòäüéâ\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º üòÅüåç‚òé',
      country: '–°—Ç—Ä–∞–Ω–∞',
      form: '–ö–ª–∞—Å—Å',
      us: '–°–®–ê',
      by: '–ë–µ–ª–∞—Ä—É—Å—å',
      ru: '–†–æ—Å—Å–∏—è',
      ua: '–£–∫—Ä–∞–∏–Ω–∞',
      age: '–í–æ–∑—Ä–∞—Å—Ç',
      avatar: '–ê–≤–∞—Ç–∞—Ä',
      place: '–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã',
      subjects: '–ü—Ä–µ–¥–º–µ—Ç—ã',
      subject: '–ü—Ä–µ–¥–º–µ—Ç',
      math: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
      physics: '–§–∏–∑–∏–∫–∞',
      chemistry: '–•–∏–º–∏—è',
      profile: '–ü—Ä–æ—Ñ–∏–ª—å',
      logout: '–í—ã–π—Ç–∏',
      online: ' –≤ —Å–µ—Ç–∏',
      offline:' –Ω–µ –≤ —Å–µ—Ç–∏',
      incomReq: '–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è',
      acceptedReq: ' –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è',
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ',
      open: '–û—Ç–∫—Ä—ã—Ç—å',
      countColumn: '–ü–æ—Å—á–∏—Ç–∞—Ç—å –≤ —Å—Ç–æ–ª–±–∏–∫',
      selectedDigits: '–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞:',
      reset: '–°–±—Ä–æ—Å',
      saveList: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏—Å—Ç',
      sendToTeacher: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É—á–∏—Ç–µ–ª—é',
      count: '–ü–æ—Å—á–∏—Ç–∞—Ç—å',
      addition: '–°–ª–æ–∂–µ–Ω–∏–µ',
      subtraction: '–í—ã—á–∏—Ç–∞–Ω–∏–µ',
      multiplication: '–£–º–Ω–æ–∂–µ–Ω–∏–µ',
      division: '–î–µ–ª–µ–Ω–∏–µ',
      tasks: '–ó–∞–¥–∞–Ω–∏—è',
      diary: '–¢–∞–±–µ–ª—å',
      diary2: '–î–Ω–µ–≤–Ω–∏–∫',
      users: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
      messages: '–°–æ–æ–±—â–µ–Ω–∏—è',
      devices: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
      height: '–í—ã—Å–æ—Ç–∞',
      journal: '–ñ—É—Ä–Ω–∞–ª',
      pupils: '–£—á–µ–Ω–∏–∫–∏',
      typeMessage: '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      search: '–ü–æ–∏—Å–∫',
      searchTip: '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥',
      created: '–°–æ–∑–¥–∞–Ω–Ω–æ–µ',
      sent: '–ü—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ',
      newList: '–ù–æ–≤—ã–π –ª–∏—Å—Ç',
      done: '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ',
      students: '–£—á–∞—â–∏–µ—Å—è',
      teachers: '–£—á–∏—Ç–µ–ª—è',
      friendTip: '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π',
      teachTip: '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —É—á–∏—Ç–µ–ª–µ–π',
      friends: '–ú–æ–∏ –¥—Ä—É–∑—å—è',
      incom: '–í—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏',
      outg: '–ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏',
      myTeachers: '–ú–æ–∏ —É—á–∏—Ç–µ–ª—è',
      chat: '–ß–∞—Ç',
      delFriend: '–£–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π',
      acceptReq: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å',
      decline: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É',
      cancelReq: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å',
      dialogs: '–î–∏–∞–ª–æ–≥–∏',
      edit: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
      yes: '–î–∞',
      addFriend: '–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è',
      close: '–ó–∞–∫—Ä—ã—Ç—å',
      edProf: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
      typeReq: '–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∏–º—è –¥—Ä—É–≥–∞',
      forMobile: '–î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
      mobileTip: '–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—ë —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–∞–∫ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É',
      appTip: '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...',
      openKeyboard: '–û—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É',
      delete: '–£–¥–∞–ª–∏—Ç—å',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ',
      exitnsave: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏'
    },
    {
      reg: 'Sign up',
      sign: 'Sign in',
      name: 'First name',
      sname: 'Second name',
      type: 'Type',
      stud: 'Student',
      teach: 'Teacher',
      email: 'Email',
      pass: 'Password',
      log: 'Join',
      sup: 'Log in',
      snack: 'Registration will be opened on the 20th of July üòÑüòäüéâ\nJoin our social networks communities üòÅüåç‚òé',
      country: 'Country',
      form: 'Form',
      us: 'USA',
      by: 'Belarus',
      ru: 'Russia',
      ua: 'Ukraine',
      age: 'Age',
      avatar: 'Profile picture',
      place: 'Institution',
      subjects: 'Subjects',
      subject: 'Subject',
      math: 'Math',
      physics: 'Physics',
      chemistry: 'Chemistry',
      profile: 'Profile',
      logout: 'Sign out',
      online: ' is online',
      offline:' is offline',
      incomReq: 'Friend request',
      acceptedReq: ' accepted your friend request',
      message: 'New message from user ',
      open: 'Open',
      countColumn: 'Count with columns',
      selectedDigits: 'Selected numbers:',
      reset: 'Reset',
      saveList: 'Save sheet',
      sendToTeacher: 'Send to teacher',
      count: 'Count',
      addition: 'Addition',
      subtraction: 'Subtraction',
      multiplication: 'Multiplication',
      division: 'Division',
      tasks: 'Tasks',
      diary: 'Diary',
      diary2: 'Diary',
      users: 'Users',
      messages: 'Messages',
      devices: 'Devices',
      height: 'Height',
      journal: 'Journal',
      pupils: 'Students',
      typeMessage: 'Enter your message',
      search: 'Search',
      searchTip: 'Use the search to create a dialog',
      created: 'Created',
      sent: 'Sent',
      newList: 'New sheet',
      done: 'Done',
      students: 'Students',
      teachers: 'Teachers',
      friendTip: 'Use the search to find friends',
      teachTip: 'Use the search to find teachers',
      friends: 'My friends',
      incom: 'Incoming requests',
      outg: 'Outgoing requests',
      myTeachers: 'My teachers',
      chat: 'Chat',
      delFriend: 'Remove from friends',
      acceptReq: 'Confirm the request',
      decline: 'Reject request',
      cancelReq: 'Cancel request',
      dialogs: 'Dialogs',
      edit: 'Edit',
      yes: 'Yes',
      addFriend: 'Add as friend',
      close: 'Close',
      edProf: 'Edit profile',
      typeReq: "Enter friend's name",
      forMobile: 'For mobile devices',
      mobileTip: 'You can use your device as a wireless keyboard',
      appTip: 'Mobile app coming soon...',
      openKeyboard: 'Open keyboard',
      fMarksTip: 'Connect your teacher to earn marks',
      marksTip: 'Marks table will be added soon',
      delete: 'Delete',
      description: 'Description',
      exitnsave: 'Save and exit'
    }
  ]

  lang: any;

  subjects: any[];

  getLanguage: string = 'ru';

  setLanguage() {
    this.getLanguage = navigator.language;
  }

  constructor(private http: Http) {
    this.setLanguage();
    var currentUser = JSON.parse(localStorage.getItem('currentUser'));
    this.token = currentUser && currentUser.token;
    if (navigator.language == "ru") {
      this.lang = 0;
    } else {
      this.lang = 1;
    }
    this.subjects = [
      {
        id: 1,
        name: this.language[this.lang].math
      },
      {
        id: 2,
        name: this.language[this.lang].physics
      },
      {
        id: 3,
        name: this.language[this.lang].chemistry
      }
    ];
  }

  isInfo(): string {
    return localStorage.getItem("isInfo");
  }


  getUserInfo(data: any): Observable<any> {
    return this.http.post('https://scrawlless.org/api/userInfo.read', { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  updateUserInfo(data: any): Observable<any> {
    return this.http.post('https://scrawlless.org/api/userInfo.update', { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  readDialogs(data: any): Observable<any> {
    return this.http.post('https://scrawlless.org/api/dialogs.read', { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  readDialog(data: any): Observable<any> {
    return this.http.post('https://scrawlless.org/api/dialog.read', { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  createDialog(data: any): Observable<any> {
    return this.http.post('https://scrawlless.org/api/dialog.create', { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }


  getConnectedUser(data: any): Observable<any> {
    return this.http.post('https://scrawlless.org/api/connectedUsers.read', { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  addFriend(data: any): Observable<any> {
    return this.http.post('https://scrawlless.org/api/userConnection.create', { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  acceptFriend(data: any): Observable<any> {
    return this.http.post('https://scrawlless.org/api/userConnection.accept', { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  declineFriend(data: any): Observable<any> {
    return this.http.post('https://scrawlless.org/api/userConnection.decline', { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  cancelRequest(data: any): Observable<any> {
    return this.http.post('https://scrawlless.org/api/userConnectionRequest.cancel', { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  deleteFriend(data: any): Observable<any> {
    return this.http.post('https://scrawlless.org/api/userConnection.delete', { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  deleteList(data: any): Observable<any> {
    return this.http.post('https://scrawlless.org/api/homework.delete', { data })
      .map((response: Response) => {
        let list = response.json();
        if (list) {
          return list;
        } else {
          return "Error";
        }
      });
  }

  getUserByID(data: any): Observable<any> {
    return this.http.post('https://scrawlless.org/api/user.read', { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  searchUsers(data: any): Observable<any> {
    return this.http.post('https://scrawlless.org/api/findUsers', { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  getLists(data: any): Observable<any> {
    return this.http.post('https://scrawlless.org/api/homeworkLists.read', { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  login(data: any): Observable<boolean> {
    return this.http.post('https://scrawlless.org/api/register', { data })
      .map((response: Response) => {
        let token = response.json().token;
        if (token) {
          this.token = token;
          localStorage.setItem('currentUser', JSON.stringify({ token: token }));
          localStorage.setItem('isInfo', '0');
          localStorage.setItem('mode', String(response.json().type));
          if (localStorage.getItem('mode') == '1') {
            this.mode = 'user';
          } else {
            this.mode = 'teacher';
          }
          return true;
        } else {
          return false;
        }
      });
  }

  log(data: any): Observable<boolean> {
    return this.http.post('https://scrawlless.org/api/authenticate', { data })
      .map((response: Response) => {
        let token = response.json().token;
        if (token) {
          this.token = token;
          localStorage.setItem('currentUser', JSON.stringify({ token: token }));
          localStorage.setItem('isInfo', '0');
          localStorage.setItem('mode', String(response.json().user.type));
          return true;
        } else {
          return false;
        }
      });
  }


  listCreate(data: any): Observable<any> {
    var url;
    if (localStorage.getItem('mode') == '1') {
      url = 'https://scrawlless.org/api/homework.create'
    } else {
      url = 'https://scrawlless.org/api/task.create'
    }
    return this.http.post(url, { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  hwRead(data: any): Observable<any> {
    var url;
    url = 'https://scrawlless.org/api/homeworks.read'

    return this.http.post(url, { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  tasksRead(data: any): Observable<any> {
    var url;
    url = 'https://scrawlless.org/api/tasks.read'
    return this.http.post(url, { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  homeworkRead(data: any): Observable<any> {
    var url;
    url = 'https://scrawlless.org/api/homework.read'
    return this.http.post(url, { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  taskRead(data: any): Observable<any> {
    var url;
    url = 'https://scrawlless.org/api/task.read'
    return this.http.post(url, { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  saveHomework(data: any): Observable<any> {
    var url;
    url = 'https://scrawlless.org/api/homework.update '
    return this.http.post(url, { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  saveTask(data: any): Observable<any> {
    var url;
    url = 'https://scrawlless.org/api/task.update'
    return this.http.post(url, { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  sendToStudent(data: any): Observable<any> {
    var url;
    url = 'https://scrawlless.org/api/homeworkFromTeacher.create'
    return this.http.post(url, { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  sendToTeacher(data: any): Observable<any> {
    var url;
    url = 'https://scrawlless.org/api/homework.send'
    return this.http.post(url, { data })
      .map((response: Response) => {
        let user = response.json();
        if (user) {
          return user;
        } else {
          return "Error";
        }
      });
  }

  logout(): void {
    this.token = null;
    localStorage.removeItem('currentUser');
  }
}